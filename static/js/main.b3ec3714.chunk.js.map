{"version":3,"sources":["logo.svg","components/input/Input.js","estimator.js","components/estimateResult/EstimateResults.js","views/EstimatorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","customClassName","handleBlur","handleChange","value","name","type","placeHolder","customProps","onChange","onBlur","placeholder","className","covid19ImpactEstimator","data","numberOfDays","region","reportedCases","periodType","timeToElapse","totalHospitalBeds","avgDailyIncomeInUSD","avgDailyIncomePopulation","impact","severeImpact","factor","Math","trunc","daysConversionRatio","hospitalBeds","currentlyInfected","infectionsByRequestedTime","infected","severeInfected","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","EstimateResults","console","log","result","Number","toLocaleString","EstimatorPage","useState","population","setPopulation","setTimeToElapse","setReportedCases","setTotalHospitalBeds","setPeriodType","estimatorResults","setEstimatorResults","onSubmitHanlder","e","a","preventDefault","avgAge","parseInt","res","onSubmit","htmlFor","id","aria-describedby","data-population","required","target","data-time-to-elapse","data-reported-cases","data-total-hospital-beds","data-period-type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3ec3714.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Input.css\";\n\n/** How to use the components\n * <Input type=\"text\" name=\"firstName\" customClassName=\"some-class\"/>\n */\n\nconst Input = (props) => {\n  const {\n    customClassName,\n    handleBlur,\n    handleChange,\n    value,\n    name,\n    type,\n    placeHolder,\n    ...customProps\n  } = props;\n\n  return (\n    <input\n      {...customProps}\n      onChange={handleChange}\n      type={type}\n      onBlur={handleBlur}\n      placeholder={placeHolder}\n      className={customClassName}\n      name={name}\n      value={value}\n    />\n  );\n};\n\nInput.propTypes = {};\n\nexport default Input;\n","const covid19ImpactEstimator = (data) => {\n    const {\n      region,\n      reportedCases,\n      periodType,\n      timeToElapse,\n      totalHospitalBeds\n    } = data;\n  \n    const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = region;\n  \n    let result = {};\n    const impact = {};\n    const severeImpact = {};\n  \n    let numberOfDays;\n  \n    if (periodType === 'days') {\n      numberOfDays = timeToElapse;\n    }\n    if (periodType === 'weeks') {\n      numberOfDays = 7 * timeToElapse;\n    }\n    if (periodType === 'months') {\n      numberOfDays = 30 * timeToElapse;\n    }\n  \n    const factor = Math.trunc(numberOfDays / 3);\n    const daysConversionRatio = Math.trunc(2 ** factor);\n  \n    const hospitalBeds = totalHospitalBeds * 0.35;\n  \n    /* challenge 1 */\n  \n    // impact\n    impact.currentlyInfected = reportedCases * 10;\n    impact.infectionsByRequestedTime = impact.currentlyInfected * daysConversionRatio;\n  \n    // severeImpact\n    severeImpact.currentlyInfected = reportedCases * 50;\n    severeImpact.infectionsByRequestedTime = severeImpact.currentlyInfected * daysConversionRatio;\n  \n    /* challenge 2 */\n  \n    const infected = impact.currentlyInfected * daysConversionRatio;\n    const severeInfected = severeImpact.currentlyInfected * daysConversionRatio;\n  \n    // impact\n    impact.severeCasesByRequestedTime = Math.trunc(0.15 * infected);\n    impact.hospitalBedsByRequestedTime = Math.trunc(\n      hospitalBeds - 0.15 * infected\n    );\n  \n    // severeImpact\n    severeImpact.severeCasesByRequestedTime = Math.trunc(0.15 * severeInfected);\n    severeImpact.hospitalBedsByRequestedTime = Math.trunc(\n      hospitalBeds - 0.15 * severeInfected\n    );\n  \n    /* challenege 3 */\n    // impact\n    impact.casesForICUByRequestedTime = Math.trunc(\n      0.05 * impact.infectionsByRequestedTime\n    );\n    impact.casesForVentilatorsByRequestedTime = Math.trunc(\n      0.02 * impact.infectionsByRequestedTime\n    );\n  \n    impact.dollarsInFlight = Math.trunc(\n      (impact.infectionsByRequestedTime\n        * avgDailyIncomeInUSD\n        * avgDailyIncomePopulation)\n        / numberOfDays\n    );\n  \n    // severeImpact\n    severeImpact.casesForICUByRequestedTime = Math.trunc(\n      0.05 * severeImpact.infectionsByRequestedTime\n    );\n    severeImpact.casesForVentilatorsByRequestedTime = Math.trunc(\n      0.02 * severeImpact.infectionsByRequestedTime\n    );\n  \n    severeImpact.dollarsInFlight = Math.trunc(\n      (severeImpact.infectionsByRequestedTime\n        * avgDailyIncomeInUSD\n        * avgDailyIncomePopulation)\n        / numberOfDays\n    );\n  \n    result = {\n      data,\n      impact,\n      severeImpact\n    };\n  \n    return result;\n  };\n  \n  export default covid19ImpactEstimator;\n  ","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst EstimateResults = (props) => {\n  console.log(66, props);\n\n  //   const {}\n  // currentlyInfected: 0\n  // infectionsByRequestedTime: 0\n  // severeCasesByRequestedTime: 0\n  // hospitalBedsByRequestedTime: 0\n  // casesForICUByRequestedTime: 0\n  // casesForVentilatorsByRequestedTime: 0\n  // dollarsInFlight: NaN\n\n  let result = <p>Hold on while your result are being calculated.</p>;\n  if (props.result) {\n    const { data, impact, severeImpact } = props.result;\n    result = (\n      <Fragment>\n        <div>\n          <h5>Estimation for non critical case</h5>\n          <div>\n            <p>{Number(impact.currentlyInfected).toLocaleString()}</p>\n            <p>{Number(impact.infectionsByRequestedTime).toLocaleString()}</p>\n            <p>{Number(impact.severeCasesByRequestedTime).toLocaleString()}</p>\n            <p>{Number(impact.hospitalBedsByRequestedTime).toLocaleString()}</p>\n            <p>{Number(impact.casesForICUByRequestedTime).toLocaleString()}</p>\n            <p>\n              {Number(\n                impact.casesForVentilatorsByRequestedTime\n              ).toLocaleString()}\n            </p>\n            <p>${Number(impact.dollarsInFlight).toLocaleString()}</p>\n          </div>\n        </div>\n        <div>\n          <h5>Estimation for critical cases</h5>\n          <div>\n            <p>{Number(severeImpact.currentlyInfected).toLocaleString()}</p>\n            <p>\n              {Number(severeImpact.infectionsByRequestedTime).toLocaleString()}\n            </p>\n            <p>\n              {Number(severeImpact.severeCasesByRequestedTime).toLocaleString()}\n            </p>\n            <p>\n              {Number(\n                severeImpact.hospitalBedsByRequestedTime\n              ).toLocaleString()}\n            </p>\n            <p>\n              {Number(severeImpact.casesForICUByRequestedTime).toLocaleString()}\n            </p>\n            <p>\n              {Number(\n                severeImpact.casesForVentilatorsByRequestedTime\n              ).toLocaleString()}\n            </p>\n            <p>${Number(severeImpact.dollarsInFlight).toLocaleString()}</p>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n  return <section>{result}</section>;\n};\n\nEstimateResults.propTypes = {};\n\nexport default EstimateResults;\n","import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Estimator.css\";\nimport Input from \"../components/input/Input\";\nimport Button from \"../components/button/Button\";\nimport covid19ImpactEstimator from \"../estimator\";\nimport EstimateResults from \"../components/estimateResult/EstimateResults\";\n\nconst EstimatorPage = (props) => {\n  const [population, setPopulation] = useState(554445);\n  const [timeToElapse, setTimeToElapse] = useState(55);\n  const [reportedCases, setReportedCases] = useState(555);\n  const [totalHospitalBeds, setTotalHospitalBeds] = useState(555);\n  const [periodType, setPeriodType] = useState(\"days\");\n  const [estimatorResults, setEstimatorResults] = useState();\n\n  const onSubmitHanlder = async (e) => {\n    e.preventDefault();\n    const data = {\n      region: {\n        name: \"Africa\",\n        avgAge: 19.7,\n        avgDailyIncomeInUSD: 4,\n        avgDailyIncomePopulation: 0.73,\n      },\n      periodType: periodType,\n      timeToElapse: parseInt(timeToElapse),\n      reportedCases: parseInt(reportedCases),\n      population: parseInt(population),\n      totalHospitalBeds: parseInt(totalHospitalBeds),\n    };\n\n    console.log(777, data);\n\n    const res = covid19ImpactEstimator(data);\n\n    console.log(res);\n    await setEstimatorResults(res);\n  };\n\n  return (\n    <section className=\"banner row\">\n      <div className=\"col-md-4 perfect-center\">\n        <div className=\"auth-container\">\n          <div>\n            <h4 className=\"font-bold\">covid-19 Estimator</h4>\n            <div>\n              <p className=\"text-muted small-info-text\">\n                All Input are compulsory\n              </p>\n            </div>\n          </div>\n          <form onSubmit={onSubmitHanlder} className=\"auth-form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"population\">Population</label>\n              <Input\n                name=\"population\"\n                type=\"number\"\n                customClassName=\"form-control auth-input\"\n                id=\"population\"\n                placeHolder=\"Population\"\n                aria-describedby=\"population\"\n                data-population\n                required\n                value={population}\n                handleChange={(e) => setPopulation(e.target.value)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"timeToElapse\">Time to Elapse</label>\n              <Input\n                name=\"timeToElapse\"\n                type=\"number\"\n                customClassName=\"form-control auth-input\"\n                id=\"timeToElapse\"\n                placeHolder=\"Time to Elapse\"\n                aria-describedby=\"timeToElapse\"\n                data-time-to-elapse\n                required\n                value={timeToElapse}\n                handleChange={(e) => setTimeToElapse(e.target.value)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"reportedCases\">Reported Cases</label>\n              <Input\n                name=\"reportedCases\"\n                type=\"number\"\n                customClassName=\"form-control auth-input\"\n                id=\"reportedCases\"\n                placeHolder=\"Reported Cases\"\n                aria-describedby=\"reportedCases\"\n                data-reported-cases\n                required\n                value={reportedCases}\n                handleChange={(e) => setReportedCases(e.target.value)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"totalHospitalBeds\">Total Hospital Beds</label>\n              <Input\n                name=\"totalHospitalBeds\"\n                type=\"number\"\n                customClassName=\"form-control auth-input\"\n                id=\"totalHospitalBeds\"\n                placeHolder=\"Total Hospital Beds\"\n                aria-describedby=\"totalHospitalBeds\"\n                data-total-hospital-beds\n                required\n                value={totalHospitalBeds}\n                handleChange={(e) => setTotalHospitalBeds(e.target.value)}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"periodType\">Period Type</label>\n\n              <div className=\"select-container\">\n                <select\n                  data-period-type\n                  id=\"periodType\"\n                  className=\"form-control filter-select\"\n                  required\n                  onChange={(e) => setPeriodType(e.target.value)}\n                >\n                  <option data-period-type value=\"days\">\n                    Days\n                  </option>\n                  <option data-period-type value=\"weeks\">\n                    Weeks\n                  </option>\n                  <option data-period-type value=\"months\">\n                    Months\n                  </option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"auth-button-container\">\n              <button className=\"btn auth-button bold-600\">Estimate</button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div className=\"col-md-6 perfect-center\">\n        <div className=\"auth-container\">\n          <div>\n            <h4 className=\"font-bold\">covid-19 Estimator Results</h4>\n            <div>\n              <p className=\"text-muted small-info-text\">\n                These are the best estimated results\n              </p>\n            </div>\n          </div>\n          <EstimateResults result={estimatorResults} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nEstimatorPage.propTypes = {};\n\nexport default EstimatorPage;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n// import \"./App.css\";\nimport EstimatorPage from \"./views/EstimatorPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EstimatorPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}